classdef ViewImageResultPanelCursor < GuiComponent & EventListener
    %VIEWSTAGESCANPANELPLOT panel for the cursor
    %   Detailed explanation goes here
    
    properties
        radioMarker
        radioZoom
        radioLocation
        
        dataCursor = [];
    end
    
    methods
        function obj = ViewImageResultPanelCursor(parent, controller)
            obj@EventListener(StageScanner.NAME);
            obj@GuiComponent(parent, controller);
            %             panel = uix.Panel('Parent', parent.component,'Title','Colormap', 'Padding', 5);
            bgMain = uibuttongroup(...
                'parent', parent.component, ...
                'Title', 'Cursor', ...
                'SelectionChangedFcn',@obj.callbackRadioSelection);
            obj.component = bgMain;
            
            rbHeight = 15; % "rb" stands for "radio button"
            rbWidth = 70;
            paddingFromLeft = 10;
            
            obj.radioMarker = uicontrol(obj.PROP_RADIO{:}, 'Parent', bgMain, ...
                'String', 'Marker', ...
                'Position', [paddingFromLeft 60 rbWidth rbHeight]);
            obj.radioZoom = uicontrol(obj.PROP_RADIO{:}, 'Parent', bgMain, ...
                'String', 'Zoom', ...
                'Position', [paddingFromLeft 35 rbWidth rbHeight]);
            obj.radioLocation = uicontrol(obj.PROP_RADIO{:}, 'Parent', bgMain, ...
                'String', 'Move to', ...
                'Position', [paddingFromLeft 10 rbWidth rbHeight]);
            
            obj.height = 100;
            obj.width = 90;
        end
        
        function update(obj,selectedRadioButton)
            % Executes when image updates
            
            %%%% Draw crosshairs: %%%%
            % get graphical axes
            resultImage = getObjByName(ViewImageResultImage.NAME);
            gAxes = resultImage.vAxes;
            % get stage position
            scanner = getObjByName(StageScanner.NAME);
            stage = getObjByName(scanner.mStageName);
            phAxes = scanner.mStageScanParams.getScanAxes;
            pos = stage.Pos(phAxes);
            % draw
            if isempty(obj.dataCursor)
                obj.dataCursor = DataCursor(resultImage);
            end
            obj.dataCursor.listenToStage(stage.name);
            obj.dataCursor.drawCrosshairs(axis(gAxes),pos)
            
            %%%% Set selected option callback
            if ~exist('selectedRadioButton','var')
                selectedRadioButton = obj.component.SelectedObject;
            end
            switch selectedRadioButton
                case obj.radioMarker
                    obj.radioMarkerCallback;
                case obj.radioZoom
                    obj.radioZoomCallback;
                case obj.radioLocation
                    obj.radioLocationCallback;
                otherwise
                    EventStation.anonymousError('This should not have happenned')
            end
        end
        
        %%%% Callbacks %%%%
        function callbackRadioSelection(obj, ~, event) % todo
            if isempty(obj.dataCursor)
                return
            end
            
            selection = event.NewValue;
            obj.dataCursor.ClearCursorData;
            obj.update(selection);
        end
        
        function radioMarkerCallback(obj)
            % display cursor with specific data tip
            datacursormode on;
            obj.dataCursor.setUpdateFcn;
        end
        function radioZoomCallback(obj)
            % Creates a rectangle on the selected area, and updates the
            % GUI's min and max values accordingly
            obj.dataCursor.UpdataDataByZoom;
            obj.radioMarker.Value = 1;
            obj.radioMarkerCallback;
        end
        function radioLocationCallback(obj)
            % Draws horizontal and vertical line on the selected
            % location, and moves the stage to this location.
            datacursormode off;
            img = imhandles(obj.dataCursor.vAxes);
            set(img, 'ButtonDownFcn', @(h,e)obj.dataCursor.setLocationFromCursor(h,e));
        end
    end
end

